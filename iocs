#!/bin/bash

### BEGIN INIT INFO
# Provides:           iocs
# Required-Start:     $syslog $remote_fs
# Required-Stop:      $syslog $remote_fs
# Default-Start:      2 3 4 5
# Default-Stop:       0 1 6
# Short-Description:  Manage EPICS iocs
### END INIT INFO


#!/bin/bash --login
#
# chkconfig: 345 90 12
# description: IOCS Init Scripts - Script to manage iocs
#
# Get function from functions library
#. /etc/init.d/functions
. /etc/init.d/init-functions

LANG=en_US.UTF-8
port=23000
appsConfigDir=/usr/local/epics/apps/config
procServBin=/usr/local/epics-nfs/extensions/R3.15.6/src/procServ-2.6.1/procServ
#TODO check if procServ will be at this address
#procServBin=/usr/local/bin/procServ

# Start the service iocs
start() {
    echo
    if [ ! -d /var/lock/subsys/IOCS ]; then
        sudo mkdir /var/lock/subsys/IOCS
        sudo chmod 777 /var/lock/subsys/IOCS
    fi
    if [ ! -d /var/run/IOCS ]; then
        sudo mkdir /var/run/IOCS
        sudo chmod 777 /var/run/IOCS
    fi    
    echo Starting IOCS Services:

    # Starting EPICS commands
    for iocCmd in `find $appsConfigDir -maxdepth 1 -name '*.cmd' ! -name '*config*'`
    do
        iocName=`echo $iocCmd | rev | cut -f1 -d/ | cut -f2 -d. | rev`
        iocBinary=`head -1 $iocCmd | cut -c3-`
        # Check if IOC is not already running... if yes, then stop previous instance(s) and child(ren)
        for pidparent in `ps -ef |grep $iocName |grep procServ |awk '{print $2}'`
        do
            echo -e "\tThere was a previous instance of $iocName running; $pidparent will be stopped before to start a new one!"
            if pgrep -P $pidparent > /dev/null 2>&1; then
                for j in `pgrep -P $pidparent 2> /dev/null`
                do
                    echo -e "\t First killing child process: $j"
                    sudo kill -9 $j 2> /dev/null
                done
            fi
            echo -e "\t Now, Killing parent process: $pidparent"
                sudo kill -9 $pidparent 2> /dev/null 
                ### Now, delete the lock file ###
                rm -f /var/lock/subsys/IOCS/$iocName
            rm -f /var/run/IOCS/$iocName
        done
        echo -e "\t Starting: $iocName"
        if [ -f $iocBinary ]; then
            $procServBin -n "$iocName" -i ^D^C $port $iocBinary $iocCmd > /dev/null 2>&1 &
            sleep 2
            PID=`ps -ef |grep $iocName |grep $port |awk '{print $1}'`
            echo $PID > /var/run/IOCS/$iocName
            touch /var/lock/subsys/IOCS/$iocName
            let "port += 10"
        else
            echo
            echo -e "\t Binary file of IOC: $iocBinary doesn't exist!"
            echo
        fi
    done

    # Starting shell scripts
    for scriptSh in `find $appsConfigDir -maxdepth 1 -name '*.sh'`
    do
        scriptName=`echo $scriptSh | rev | cut -f1 -d/ | cut -f2 -d. | rev`
        # Check if scriptSh contains 'procserv' in its name...
        if case $scriptSh in *'procserv'*) true;; *) false;; esac; then
            echo -e "\t Doesn't run old procServ process: $scriptName"
        else
            echo -e "\t Running: $scriptName"
            $scriptSh > /dev/null 2>&1 &
            sleep 2
            PID=`ps --ppid 1 -o pid,cmd | grep $scriptName | awk '{print $1}'`
            echo $PID > /var/run/IOCS/$scriptName
            touch /var/lock/subsys/IOCS/$scriptName
        fi
    done
    echo
}
startioc() {
        echo
        booltrue=true
        while [ "$booltrue" = "true" ]
        do
            if netstat -anpo |grep $port > /dev/null; then
                let "port += 10"
            else
                iocOrScriptName=$1
                iocCmd=$appsConfigDir/$iocOrScriptName".cmd"
                scriptSh=$appsConfigDir/$iocOrScriptName".sh"
                # Check if IOC is not already running... if yes, then stop previous instance(s) and child(ren)
                for pidparent in `ps -ef |grep $iocOrScriptName |grep procServ |awk '{print $2}'`
                do
                    echo -e "\tThere was a previous instance of $iocName running; $pidparent will be stopped before to start a new one!"
                    if pgrep -P $pidparent > /dev/null 2>&1; then
                        for j in `pgrep -P $pidparent 2> /dev/null`
                        do
                            echo -e "\t First killing child process: $j"
                            sudo kill -9 $j 2> /dev/null
                        done
                    fi
                    echo -e "\t Now, Killing parent process: $pidparent"
                        sudo kill -9 $pidparent 2> /dev/null 
                        ### Now, delete the lock file ###
                        rm -f /var/lock/subsys/IOCS/$iocOrScriptName
                    rm -f /var/run/IOCS/$iocOrScriptName
                done
                if [ -f $iocCmd ] || [ -f $scriptSh ]; then
                    boolExecute=true
                    if [ -f $iocCmd ]; then
                        echo -e "\t Starting: $iocOrScriptName"
                        # in this case we need a binary to execute the command
                        iocBinary=`head -1 $iocCmd | rev | cut -f1 -d! | rev`
                        $procServBin -n "$iocOrScriptName" -i ^D^C $port $iocBinary $iocCmd > /dev/null 2>&1 &
                    elif case $scriptSh in *'procserv'*) true;; *) false;; esac; then
                        # Check if scriptSh contains 'procserv' in its name...
                        echo -e "\t Doesn't run old procServ process: $scriptName"
                        boolExecute=false
                    else
                        echo -e "\t Running: $iocOrScriptName"
                        # otherwise we try to simple execute the bash script
                        $scriptSh > /dev/null 2>&1 &
                    fi
                    if [ "$boolExecute" = "true" ]; then
                        sleep 2
                        # Using PPID (Parent Process ID) equals to 1 (child of init process)
                        # to guarantee we're looking at the correct running process started
                        # by a st.cmd or by shell script
                        PID=`ps | grep "procServ" | grep $iocOrScriptName | awk '{print $1}'`
                        echo $PID > /var/run/IOCS/$iocOrScriptName
                        touch /var/lock/subsys/IOCS/$iocOrScriptName
                    fi
                else
                    echo
                    echo -e "\t Neither a command to start an IOC nor a bash script to start a system process called $iocOrScriptName doesn't exist at CONFIG directory!"
                    echo
                fi
                booltrue=false
            fi
        done
        echo
}
stop() {
    echo
    echo Stopping IOCs :
    rundir="/var/run/IOCS/"
    for i in `ls $rundir`
    do
        echo
        echo -e "\t $i"
        pidparent=`cat $rundir$i`
        if pgrep -P $pidparent > /dev/null 2>&1; then
            for j in `pgrep -P $pidparent 2> /dev/null`
            do
                echo -e "\t First killing child process: $j"
                kill -9 $j 2> /dev/null
            done
        fi
        echo -e "\t Now, Killing parent process: $pidparent"
            kill -9 $pidparent 2> /dev/null 
            ### Now, delete the lock file ###
            rm -f /var/lock/subsys/IOCS/$i
        rm -f /var/run/IOCS/$i
    done
    rm -f /var/lock/subsys/IOCS/*
    rm -f /var/run/IOCS/*
        echo
}
stopioc() {
    echo
    echo Stopping IOC $1:
    
    pidpath="/var/run/IOCS/"
    pidfile=$pidpath$1
    pidparent=`head -1 $pidfile`
    if pgrep -P $pidparent > /dev/null 2>&1; then
        for j in `pgrep -P $pidparent 2> /dev/null`
        do
            echo -e "\t First killing child process: $j"
            kill -9 $j 2> /dev/null
        done
    fi
    
    killproc -p $pidfile
    echo
}
list() {
    echo
    echo Showing Running IOCs:
    for pid in `sudo netstat -anpo |grep LISTEN |grep "procServ" |awk '{print $7}' |cut -f1 -d/`
    do
        iocName=`ps |grep $pid |awk '{print $6}'`
        iocPort=`ps |grep $pid |awk '{print $9}'`
        echo -e "\t IOC: $iocName |Port: $iocPort |PID: $pid"
    done
    echo
} 
rioc() {
    # First, stop IOC (parent and child) process(es)
    echo
    echo Restarting IOC $1:
    
    pidpath="/var/run/IOCS/"
    pidfile=$pidpath$1
    pidparent=`head -1 $pidfile`
    if pgrep -P $pidparent > /dev/null 2>&1; then
        for j in `pgrep -P $pidparent 2> /dev/null`
        do
            echo -e "\t First killing child process: $j"
            kill -9 $j 2> /dev/null
        done
    fi
    
    killproc -p $pidfile
    echo
    # Then, start IOC again...
    startioc $1
}
tn() {
    echo
    echo "Telnet on: $1..."
    telnet=`ps -ef |grep $1 |awk '{print $9}'`
    telnet localhost $telnet
    echo $telnet
}
statusIOCS() {
    pidpath="/var/run/IOCS/"
    cd $pidpath
    for i in `ls $pidpath`
    do
        status_of_proc -p $pidpath$i $i $i
    done
}
dbl() {
    for dbl in `ps -ef |grep -i $1 |awk '{print $9}'`
    do
        echo
        exec 3<>/dev/tcp/127.0.0.1/$dbl
        echo -e "\ndbl\r\n" >&3
        timeout 1 cat <&3 |egrep "[A-Z][0-9]*:[A-Z][0-9]*"
        exec 3<&-
#       kill -9 `ps -e |grep cat |awk '{print $1}'`
    done
echo
}

### main logic ###
case "$1" in
  start)
      if [ -d /usr/local/epics ]; then
          if [ -z "$2" ]; then
              start
          else
              echo Wrong command! Usage: $0 startioc $2
          fi
      fi
      ;;
  startioc)
      if [ ! -z "$2" ]; then
          startioc $2
      else
          echo "Usage: $0 startioc {iocname}"
      fi
      ;;
  stop)
      if [ -z "$2" ]; then
          stop
      else
          echo Wrong command! Usage: $0 stopioc $2
      fi
      ;;
  stopioc)
      if [ ! -z "$2" ]; then
          stopioc $2
      else
          echo "Usage: $0 stopioc {iocname}"
          echo "To get all running IOCs: $0 list"
      fi
      ;;
  list)
      list 
      ;;
  rioc)
      if [ ! -z "$2" ]; then
          rioc $2
      else
          echo "Usage: $0 rioc {iocname}" 
          echo "To get all running IOCs: $0 iocs"
      fi
      ;;
  tn)
      if [ ! -z "$2" ]; then
          tn $2
      else
          echo "Usage: $0 tn {iocname}"
      fi
      ;;
  dbl)
      if [ ! -z "$2" ]; then
          dbl $2
      else
          echo "Usage: $0 dbl {iocname}"
      fi
      ;;
  status)
      statusIOCS 
      ;;
  restart|reload|condrestart)
      if [ -z "$2" ]; then
          stop
          echo
          echo -n "Waiting the TCP/UDP sockets to close..."
          sleep 10
          echo -n "OK!"
          sleep 1
          echo
          start
      else
          echo Wrong command! Usage: $0 rioc $2
      fi
      ;;
  *)
      echo $"Usage: $0 {status|tn|dbl|start|startioc|stop|stopioc|restart|list}"
      exit 1
esac
exit 0
